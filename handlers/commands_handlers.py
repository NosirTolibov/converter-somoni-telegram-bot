"""Command handler coming from users"""
from typing import Union

from aiogram import types
from aiogram.dispatcher.filters import Command
from aiogram.types import CallbackQuery, Message
from aiogram.utils import callback_data

from domain import get_news, parse_date, get_calculated_rate, get_nbt_rate, get_parsed_values
from keyboards.inline_keyboards import show_currency_keyboard, menu_cd
from loader import dp
from utils import exceptions, rate_limit


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    """Sends a welcome message"""
    await message.answer(
        f'–°–∞–ª–æ–º, {message.from_user.full_name}! üòä üáπüáØ\n'
        '–ú–µ–Ω—è –∑–æ–≤—É—Ç –°–æ–º–æ–Ω.\n\n'
        f'<b>–í–æ—Ç —á—Ç–æ —è —É–º–µ—é.</b>\n'
        '–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç /help\n'
        '/nbt - –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ë–∞–Ω–∫–∞ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω–∞\n'
        '/news - –ù–æ–≤–æ—Å—Ç–∏ —ç–∫–æ–Ω–æ–º–∏–∫–∏')


@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    """Sends help via bot"""
    command_list = [
        f'<b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>',
        '/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥',
        '/nbt - –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ë–∞–Ω–∫–∞ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω–∞',
        '/news - –ù–æ–≤–æ—Å—Ç–∏ —ç–∫–æ–Ω–æ–º–∏–∫–∏\n',
        f'<b>–î–ª—è –∫–æ–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç, –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>',
        '- 500 —Ä—É–±–ª–µ–π',
        '- 120.5 –¥–æ–ª–ª–∞—Ä–æ–≤',
        '- 354,95 –µ–≤—Ä–æ',
        '–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—É–º–º—É, –∞ –±–æ—Ç —Å–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º —Ç–∏–ø –≤–∞–ª—é—Ç—ã'
    ]
    await message.answer('\n'.join(command_list))


@dp.message_handler(commands=['news'])
async def send_news(message: types.Message):
    """Sends news randomly by tag National Bank of Tajikistan"""
    news_link = get_news()
    await message.answer(
        f'{news_link}')


# @rate_limit(120, 'nbt')
@dp.message_handler(commands=['nbt'])
async def national_bank_rate(message: types.Message):
    """Sends the rate of the National Bank of Tajikistan"""
    nbt_rate = get_nbt_rate()
    answer_message = f'<b>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∫ —Å–æ–º–æ–Ω–∏:</b>\n' + \
                     '*–ø–æ –∫—É—Ä—Å—É –ù–ë–¢ –∑–∞ ' + parse_date(nbt_rate['date']) + '\n\n' + \
                     'üá∑üá∫ 1 –†—É–±–ª—å: ' + nbt_rate['rub'] + '\n' + \
                     'üá∫üá∏ 1 –î–æ–ª–ª–∞—Ä: ' + nbt_rate['usd'] + '\n' + \
                     'üá™üá∫ 1 –ï–≤—Ä–æ: ' + nbt_rate['eur']
    await message.answer(answer_message)


@dp.message_handler(regexp='(^\d+(?:[\.,]\d+)?)$')
async def get_amount_for_converting(message: Union[CallbackQuery, Message]):
    """Accepts amount only a int or float type and shows a keyboard to select currency"""
    markup = await show_currency_keyboard(message.text)
    answer_message = f'–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:'
    await message.answer(answer_message, reply_markup=markup)


@dp.callback_query_handler(menu_cd.filter())
async def send_converted_rate_keyboard(call: CallbackQuery, callback_data: dict):
    """
    Handles pressing in the currency keyboard (func: show_currency_keyboard)
    And returns converted results
    """
    amount = float(callback_data.get("amount"))
    currency = callback_data.get("currency")
    await call.message.edit_text(f'<b>{amount} {currency.upper()}</b>\n'
                                 f'{get_calculated_rate(amount, currency)}')


@dp.message_handler()
async def send_converted_rate(message: types.Message):
    """
    Processes sent messages such as amount and currency and returns the converted result
    Example: 500 —Ä—É–±–ª–µ–π
    """
    try:
        expense = get_parsed_values(message.text)
    except exceptions.NotCorrectMessage as e:
        await message.answer(str(e))
        return
    answer_message = (
        f'<b>{expense.amount} {expense.currency_text.upper()}</b>\n'
        f'{get_calculated_rate(expense.amount, expense.currency_text)}')
    await message.answer(answer_message)
